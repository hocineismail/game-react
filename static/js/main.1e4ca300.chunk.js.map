{"version":3,"sources":["constants/contants.ts","getStore.ts","assets/9zly_8ztc_210511.jpg","data/units.ts","utils/getRandomInt.ts","hooks/useDistribution.ts","utils/createDistribution.ts","utils/getScore.ts","assets/archers.jpg","assets/cavalry.jpg","assets/pikeman.jpg","components/units/Units.tsx","actions/actions.ts","components/loading/Loading.tsx","components/score/Score.tsx","components/history/History.tsx","components/game_over/GameOver.tsx","components/battle/Battle.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APP_START","APP_RESTART","ON_CHANGE_SCORE","initialState","started","score","history","resultCurrentBattle","unit","round","appReducer","state","action","type","player","payload","currentBattle","player_score","computer","computer_score","currentScore","currentRound","units","getRandomInt","max","Math","floor","random","useDistribution","useState","distribution","setDistribution","useEffect","result","index","createDistribution","mapDispatchToProps","onChangeScore","connect","className","style","backgroundColor","display","justifyContent","alignItems","map","cursor","onClick","randomNumber","fight","getScore","onChooseNextMove","src","cavarly","archers","pikeman","width","maxHeight","Loading","float","History","show","setShow","handleClose","Button","variant","Modal","onHide","Header","closeButton","Title","Body","Table","striped","bordered","hover","item","Footer","getHistory","getResultCurrentBattle","Card","minHeight","fontSize","Row","Col","marginLeft","marginRight","onStart","App","isAppStarted","backgroundImage","background","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e4ca300.chunk.js","sourcesContent":["// action type(s)\nexport const APP_START = 'APP_START';\nexport const APP_RESTART = 'APP_RESTART';\nexport const ON_CHANGE_SCORE = 'ON_CHANGE_SCORE';","import { Action, applyMiddleware, createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { APP_RESTART, APP_START, ON_CHANGE_SCORE } from './constants/contants';\nimport { IHistory, ISingleResult, TAppActions } from './typings/global';\n\n\n// state definition\nexport interface IAppState {\n  started: boolean;\n  score: number[];\n  history: IHistory[];\n  resultCurrentBattle: [ISingleResult, ISingleResult];\n  round: number;\n}\n\nexport const initialState: IAppState = {\n  started: false,\n  score: [0, 0],\n  history: [],\n  resultCurrentBattle: [\n    { unit: '', score: 0 },\n    { unit: '', score: 0 },\n  ],\n  round: 0,\n};\n\n// app reducer\nexport function appReducer(state: IAppState = initialState, action: any) {\n  switch (action.type) {\n    case APP_START:\n      return {\n        ...state,\n        started: true,\n      };\n    case ON_CHANGE_SCORE:\n      return {\n        ...state,\n        history: [...state.history, {\n          player: action.payload.currentBattle[0].unit,\n          player_score: action.payload.currentBattle[0].score,\n          computer: action.payload.currentBattle[1].unit,\n          computer_score: action.payload.currentBattle[1].score,\n        }],\n        resultCurrentBattle: action.payload.currentBattle,\n        round: state.round + 1,\n        score: [\n          state.score[0] + action.payload.currentBattle[0].score,\n          state.score[1] + action.payload.currentBattle[1].score,\n        ],\n      };\n    case APP_RESTART:\n      return {\n        started: false,\n        score: [0, 0],\n        history: [],\n        resultCurrentBattle: [\n          { unit: '', score: 0 },\n          { unit: '', score: 0 },\n        ],\n        round: 0,\n      };\n    default:\n      return state;\n  }\n}\n\n// started state selector\nexport const isAppStarted = (state: IAppState) => state.started;\nexport const currentScore = (state: IAppState) => state.score;\nexport const getHistory = (state: IAppState) => state.history;\nexport const getResultCurrentBattle = (state: IAppState) => state.resultCurrentBattle;\nexport const currentRound = (state: IAppState) => state.round;\n\nexport type AppStore = Store<IAppState, TAppActions | Action>;\n\nexport default function getStore(): AppStore {\n  const store = createStore(appReducer, composeWithDevTools(applyMiddleware()));\n  return store;\n}\n","export default __webpack_public_path__ + \"static/media/9zly_8ztc_210511.f30bf659.jpg\";","// Solder of our game\n\nexport const units: string[] = [\"Cavalry\", \"Archers\", \"Pikemen\"];","/**\n * \n * @param max limitaion the random number\n * @returns random number between 0 to max\n */\nexport const getRandomInt = (max: number): number => {\n  return Math.floor(Math.random() * Math.floor(max))\n}","import {useEffect, useState} from 'react'\nimport { createDistribution } from '../utils/createDistribution';\n\n/**\n *  \n *  When the game start it should to distribute units for icrease probability for one of units to 50/100\n*/\nexport default function useDistribution(): string[] {\n    const [distribution, setDistribution] = useState<string[]>([]);\n    useEffect(() => {\n        let result = createDistribution();\n        setDistribution(result)\n    },[setDistribution])\n  return  distribution\n}","import { units } from \"../data/units\"\nimport { getRandomInt } from \"./getRandomInt\"\n/**\n * \n *  we will increase probability of choice to [50/100, 25/100, 25/100]\n * @returns should return like that ex: [\"one\", \"one\", \"two\", \"three\"]\n */\n\nexport const createDistribution = (): string[] => {\n let index: number = getRandomInt(3)\n let distribution: string[] = [...units, units[index]]\n return distribution\n}","/**\n * \n * @param fight 2 Units choose by player and compter (randomly)\n * it should make : between units\n * @returns return score of this round Cavalry defeat Archers we got [1,-1]\n */\nexport const getScore = (fight: string): number[] => {\n    switch (fight) {\n        case \"Cavalry:Archers\": {\n          return [1,-1]\n          \n        }\n        case \"Archers:Pikemen\": {\n            return [1,-1]\n        }\n        case \"Pikemen:Cavalry\": {\n            return [1,-1]\n        }\n        case \"Cavalry:Pikemen\": {\n            return [-1, 1]\n        }\n        case \"Archers:Cavalry\": {\n            return [-1, 1]\n        }\n        case \"Pikemen:Archers\": {\n            return [-1, 1]\n        }\n        default: {\n            return [-1, -1]\n        }\n      }\n  }","export default __webpack_public_path__ + \"static/media/archers.382e773f.jpg\";","export default __webpack_public_path__ + \"static/media/cavalry.bc9e04cf.jpg\";","export default __webpack_public_path__ + \"static/media/pikeman.f911dfd8.jpg\";","import { FC } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { onChangeScore } from '../../actions/actions';\nimport { units } from '../../data/units';\n\nimport useDistribution from '../../hooks/useDistribution';\nimport { IUnitsProps } from '../../typings/global';\nimport { getRandomInt } from '../../utils/getRandomInt';\nimport { getScore } from '../../utils/getScore';\nimport archers from '../../assets/archers.jpg';\nimport cavarly from '../../assets/cavalry.jpg';\nimport pikeman from '../../assets/pikeman.jpg';\n\n/**\n * onChangeScore for dispatching the result to store\n * Units component render 3 button to make an action (attack next round)\n */\n\nexport const Units: FC<IUnitsProps> = ({ onChangeScore }) => {\n  //When the game start it should to distribute units for icrease probability\n  //to 50/100 25/100 25/100\n  const distribution = useDistribution();\n  /**\n   *\n   * @param unit unit is choosed by player\n   */\n  const onChooseNextMove = (unit: string): void => {\n    // use getRandomInt to choose random number for the computer's move\n    let randomNumber = getRandomInt(4);\n    // use getScore to get score of this round |\n    // Should return [number, number] example: [1, -1]\n    let score = getScore(unit + ':' + distribution[randomNumber]);\n\n    let currentBattle = [\n      { unit: unit, score: score[0] },\n      { unit: distribution[randomNumber], score: score[1] },\n    ];\n    //dispatch result to store\n    onChangeScore(currentBattle);\n  };\n  // Cavalry;\n  // Archers;\n  // Pikemen;\n  return (\n    <div\n      className=\"text-center\"\n      style={{\n        backgroundColor: 'white',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}>\n      {units.map((unit: string) => {\n        return (\n          <div key={unit} style={{ cursor: 'pointer' }} onClick={() => onChooseNextMove(unit)}>\n            <img\n              src={unit === 'Cavalry' ? cavarly : unit === 'Archers' ? archers : pikeman}\n              style={{ width: '100px', maxHeight: '130px' }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const mapDispatchToProps = {\n  onChangeScore: onChangeScore,\n};\n\nexport default connect(null, mapDispatchToProps)(Units);\n","import { APP_RESTART, APP_START, ON_CHANGE_SCORE } from '../constants/contants';\nimport { IAppChangeScore, IAppReStartAction, IAppStartAction } from '../typings/global';\n\n// action builder(s)\nexport const appStartAction: () => IAppStartAction = () => ({\n  type: APP_START,\n});\n\nexport const onRestartAction: () => IAppReStartAction = () => ({\n  type: APP_RESTART,\n});\n\nexport const onChangeScore: (currentBattle: any) => IAppChangeScore = (currentBattle: string) => ({\n  type: ON_CHANGE_SCORE,\n  payload: {\n    currentBattle: currentBattle,\n  },\n});\n","function Loading() {\n  return <span className=\"loading\">Loading...</span>;\n}\nexport default Loading;\n","import { connect } from 'react-redux';\n\nimport { currentScore, IAppState } from '../../getStore';\nimport { IScoreProps } from '../../typings/global';\nimport './Score.css';\n\n/**\n * score provided by store\n * Score component display the current score of our battle between player and computer\n\n */\n\nexport function Score({ score }: IScoreProps) {\n  return (\n    <div className=\"score\">\n      <div style={{ float: 'left' }}>You: {score[0]}</div>\n      <div style={{ float: 'right' }}>Copmuter: {score[1]}</div>\n    </div>\n  );\n}\n\n//use mapStateToProps for get state from store\nexport const mapStateToProps = (state: IAppState) => {\n  const score = currentScore(state);\n  return {\n    score,\n  };\n};\n\nexport default connect(mapStateToProps)(Score);\n","import { useState } from 'react';\nimport { Button, Modal, Table } from 'react-bootstrap';\nimport { IHistory, IHistoryProps } from '../../typings/global';\n\nfunction History({ history }: IHistoryProps) {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  return (\n    <>\n      <Button variant=\"primary\" className=\"btn-fight\" onClick={handleShow}>\n        Show battle's history\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Result</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Player(You)</th>\n                <th>Computer</th>\n                <th>Score</th>\n              </tr>\n            </thead>\n            <tbody>\n              {history?.map((item: IHistory, index: number) => {\n                return (\n                  <tr key={`key-${index}`}>\n                    <td>{index + 1}</td>\n                    <td>{item.player}</td>\n                    <td>{item.computer}</td>\n                    <td>\n                      <b>\n                        {item.player_score} - {item.computer_score}\n                      </b>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" className=\"btn-fight\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default History;\n","import { connect } from 'react-redux';\n\nimport { currentScore, getHistory, IAppState } from '../../getStore';\nimport { IHistory } from '../../typings/global';\nimport History from '../history/History';\n\ntype Props = {\n  score: number[];\n  history: IHistory[];\n};\n\nexport function GameOver({ score, history }: Props) {\n  return (\n    <div className=\"text-center\">\n      <h2>Game is finished with 20 round and totol Score is</h2>\n      <h1>\n        PLayer(You): {score[0]}| Computer: {score[1]}\n        <br />\n        Winner is: {score[0] > score[1] ? 'YOU' : 'COMPUTER'}\n      </h1>\n      <History history={history} />\n    </div>\n  );\n}\n\nexport const mapStateToProps = (state: IAppState) => {\n  const score = currentScore(state);\n  const history = getHistory(state);\n  return {\n    score,\n    history,\n  };\n};\n\nexport default connect(mapStateToProps)(GameOver);\n","import { Card, Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { currentRound, getResultCurrentBattle, IAppState } from '../../getStore';\nimport { IBattleProps } from '../../typings/global';\nimport archers from '../../assets/archers.jpg';\nimport cavarly from '../../assets/cavalry.jpg';\nimport pikeman from '../../assets/pikeman.jpg';\n\n/**\n * resultCurrentBattle and round provided from store\n * Battle display display the current battle with score and result ofr a both (player and computer)\n  \n*/\n\nexport function Battle({ round, resultCurrentBattle }: IBattleProps) {\n  return (\n    <Card style={{ minHeight: '50vh' }}>\n      <Card.Body>\n        <Card.Title>\n          Round: {round} it left: {20 - round}\n        </Card.Title>\n        <div\n          style={{\n            fontSize: '50',\n          }}>\n          {round ? (\n            <Row>\n              <Col style={{ marginLeft: '100px' }}>\n                <Card>\n                  <Card.Body>\n                    <Card.Title> YOU </Card.Title>\n                  </Card.Body>\n                  <h2>{resultCurrentBattle[0].score}</h2>\n                  <div style={{ cursor: 'pointer' }}>\n                    <img\n                      src={\n                        resultCurrentBattle[0].unit === 'Cavalry'\n                          ? cavarly\n                          : resultCurrentBattle[0].unit === 'Archers'\n                          ? archers\n                          : pikeman\n                      }\n                      style={{ width: '100px', maxHeight: '130px' }}\n                    />{' '}\n                    <h3>{resultCurrentBattle[0].unit}</h3>\n                  </div>\n                </Card>\n              </Col>\n              <Col style={{ marginRight: '100px' }}>\n                <Card>\n                  <Card.Body>\n                    <Card.Title> COMPTER </Card.Title>\n                    <h2>{resultCurrentBattle[1].score}</h2>\n                    <div style={{ cursor: 'pointer' }}>\n                      <img\n                        src={\n                          resultCurrentBattle[1].unit === 'Cavalry'\n                            ? cavarly\n                            : resultCurrentBattle[1].unit === 'Archers'\n                            ? archers\n                            : pikeman\n                        }\n                        style={{ width: '100px', maxHeight: '130px' }}\n                      />\n                    </div>\n                    <h3>{resultCurrentBattle[1].unit}</h3>\n                  </Card.Body>\n                </Card>\n              </Col>\n            </Row>\n          ) : (\n            <b>CHOOSE YOU NEXT MOVE</b>\n          )}\n        </div>\n      </Card.Body>\n    </Card>\n  );\n}\n//use mapStateToProps for get state from store\n// get round and resultCurrentBattle\nexport const mapStateToProps = (state: IAppState) => {\n  const resultCurrentBattle = getResultCurrentBattle(state);\n  const round = currentRound(state);\n  return {\n    resultCurrentBattle,\n    round,\n  };\n};\n\nexport default connect(mapStateToProps)(Battle);\n","import { FC, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { IAppState, isAppStarted, currentRound } from './getStore';\nimport { Container } from 'react-bootstrap';\n\n//import actions\nimport { appStartAction } from './actions/actions';\nimport background from './assets/9zly_8ztc_210511.jpg';\n//import types\nimport { IAppProps } from './typings/global';\n//import components\nimport Units from './components/units/Units';\nimport Loading from './components/loading/Loading';\nimport Score from './components/score/Score';\nimport GameOver from './components/game_over/GameOver';\nimport Battle from './components/battle/Battle';\n\n// import css\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n/**\n * started false by default before starting game\n * round the count of round start from 0 to 20 and after reaching 20 the game will finished (commping from store)\n * onStart a function to start our game\n * AppFC is the global component for this game\n */\n\nexport const AppFC: FC<IAppProps> = ({ started, round, onStart }) => {\n  useEffect(() => {\n    if (!started) {\n      onStart();\n    }\n  }, [started, onStart]);\n\n  //Render loading component the start of game\n  if (!started) {\n    return <Loading />;\n  }\n\n  //After 20 of rounds should display the end of this game with the history and the score\n  if (round === 20) return <GameOver />;\n\n  //Render the game\n  return (\n    <div className=\"app\" style={{ backgroundImage: `url(${background})` }}>\n      <Container className=\"text-center\">\n        <Score />\n        <Battle />\n        <Units />\n      </Container>\n    </div>\n  );\n};\n\n//use mapStateToProps for get state from store\nexport const mapStateToProps = (state: IAppState) => {\n  const started = isAppStarted(state);\n  const round = currentRound(state);\n  return {\n    started,\n    round,\n  };\n};\n\n//use mapDispatchToProps for dispatching data to store\nexport const mapDispatchToProps = {\n  onStart: appStartAction,\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppFC);\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport getStore from './getStore';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = getStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}